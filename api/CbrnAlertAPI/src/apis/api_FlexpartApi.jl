# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function flexpart_input_post_read(handler)
    function flexpart_input_post_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["retrievalType"] = OpenAPI.Servers.to_param(String, query_params, "retrievalType", )
        openapi_params["FlexpartInputPostRequest"] = OpenAPI.Servers.to_param_type(FlexpartInputPostRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function flexpart_input_post_validate(handler)
    function flexpart_input_post_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function flexpart_input_post_invoke(impl; post_invoke=nothing)
    function flexpart_input_post_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.flexpart_input_post(req::HTTP.Request, openapi_params["FlexpartInputPostRequest"]; retrieval_type=get(openapi_params, "retrievalType", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function flexpart_inputs_get_read(handler)
    function flexpart_inputs_get_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["status"] = OpenAPI.Servers.to_param(RunStatus, query_params, "status", )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function flexpart_inputs_get_validate(handler)
    function flexpart_inputs_get_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function flexpart_inputs_get_invoke(impl; post_invoke=nothing)
    function flexpart_inputs_get_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.flexpart_inputs_get(req::HTTP.Request; status=get(openapi_params, "status", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function flexpart_inputs_input_id_delete_read(handler)
    function flexpart_inputs_input_id_delete_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["inputId"] = OpenAPI.Servers.to_param(String, path_params, "inputId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function flexpart_inputs_input_id_delete_validate(handler)
    function flexpart_inputs_input_id_delete_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function flexpart_inputs_input_id_delete_invoke(impl; post_invoke=nothing)
    function flexpart_inputs_input_id_delete_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.flexpart_inputs_input_id_delete(req::HTTP.Request, openapi_params["inputId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function flexpart_inputs_input_id_get_read(handler)
    function flexpart_inputs_input_id_get_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["inputId"] = OpenAPI.Servers.to_param(String, path_params, "inputId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function flexpart_inputs_input_id_get_validate(handler)
    function flexpart_inputs_input_id_get_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function flexpart_inputs_input_id_get_invoke(impl; post_invoke=nothing)
    function flexpart_inputs_input_id_get_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.flexpart_inputs_input_id_get(req::HTTP.Request, openapi_params["inputId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function flexpart_inputs_input_id_put_read(handler)
    function flexpart_inputs_input_id_put_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["inputId"] = OpenAPI.Servers.to_param(String, path_params, "inputId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["newName"] = OpenAPI.Servers.to_param(String, query_params, "newName", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function flexpart_inputs_input_id_put_validate(handler)
    function flexpart_inputs_input_id_put_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function flexpart_inputs_input_id_put_invoke(impl; post_invoke=nothing)
    function flexpart_inputs_input_id_put_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.flexpart_inputs_input_id_put(req::HTTP.Request, openapi_params["inputId"], openapi_params["newName"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function flexpart_outputs_output_id_dimensions_get_read(handler)
    function flexpart_outputs_output_id_dimensions_get_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["outputId"] = OpenAPI.Servers.to_param(String, path_params, "outputId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["layer"] = OpenAPI.Servers.to_param(String, query_params, "layer", )
        openapi_params["horizontal"] = OpenAPI.Servers.to_param(Bool, query_params, "horizontal", )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function flexpart_outputs_output_id_dimensions_get_validate(handler)
    function flexpart_outputs_output_id_dimensions_get_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function flexpart_outputs_output_id_dimensions_get_invoke(impl; post_invoke=nothing)
    function flexpart_outputs_output_id_dimensions_get_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.flexpart_outputs_output_id_dimensions_get(req::HTTP.Request, openapi_params["outputId"]; layer=get(openapi_params, "layer", nothing), horizontal=get(openapi_params, "horizontal", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function flexpart_outputs_output_id_get_read(handler)
    function flexpart_outputs_output_id_get_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["outputId"] = OpenAPI.Servers.to_param(String, path_params, "outputId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function flexpart_outputs_output_id_get_validate(handler)
    function flexpart_outputs_output_id_get_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function flexpart_outputs_output_id_get_invoke(impl; post_invoke=nothing)
    function flexpart_outputs_output_id_get_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.flexpart_outputs_output_id_get(req::HTTP.Request, openapi_params["outputId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function flexpart_outputs_output_id_layers_get_read(handler)
    function flexpart_outputs_output_id_layers_get_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["outputId"] = OpenAPI.Servers.to_param(String, path_params, "outputId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["spatial"] = OpenAPI.Servers.to_param(Bool, query_params, "spatial", )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function flexpart_outputs_output_id_layers_get_validate(handler)
    function flexpart_outputs_output_id_layers_get_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function flexpart_outputs_output_id_layers_get_invoke(impl; post_invoke=nothing)
    function flexpart_outputs_output_id_layers_get_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.flexpart_outputs_output_id_layers_get(req::HTTP.Request, openapi_params["outputId"]; spatial=get(openapi_params, "spatial", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function flexpart_outputs_output_id_slice_post_read(handler)
    function flexpart_outputs_output_id_slice_post_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["outputId"] = OpenAPI.Servers.to_param(String, path_params, "outputId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["layer"] = OpenAPI.Servers.to_param(String, query_params, "layer", required=true, )
        openapi_params["geojson"] = OpenAPI.Servers.to_param(Bool, query_params, "geojson", )
        openapi_params["legend"] = OpenAPI.Servers.to_param(Bool, query_params, "legend", )
        openapi_params["body"] = OpenAPI.Servers.to_param_type(Any, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function flexpart_outputs_output_id_slice_post_validate(handler)
    function flexpart_outputs_output_id_slice_post_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function flexpart_outputs_output_id_slice_post_invoke(impl; post_invoke=nothing)
    function flexpart_outputs_output_id_slice_post_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.flexpart_outputs_output_id_slice_post(req::HTTP.Request, openapi_params["layer"], openapi_params["outputId"], openapi_params["body"]; geojson=get(openapi_params, "geojson", nothing), legend=get(openapi_params, "legend", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function flexpart_outputs_output_id_stats_post_read(handler)
    function flexpart_outputs_output_id_stats_post_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["outputId"] = OpenAPI.Servers.to_param(String, path_params, "outputId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["layer"] = OpenAPI.Servers.to_param(String, query_params, "layer", required=true, )
        openapi_params["FlexpartOutputsOutputIdStatsPostRequest"] = OpenAPI.Servers.to_param_type(FlexpartOutputsOutputIdStatsPostRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function flexpart_outputs_output_id_stats_post_validate(handler)
    function flexpart_outputs_output_id_stats_post_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function flexpart_outputs_output_id_stats_post_invoke(impl; post_invoke=nothing)
    function flexpart_outputs_output_id_stats_post_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.flexpart_outputs_output_id_stats_post(req::HTTP.Request, openapi_params["outputId"], openapi_params["layer"], openapi_params["FlexpartOutputsOutputIdStatsPostRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function flexpart_run_post_read(handler)
    function flexpart_run_post_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["runType"] = OpenAPI.Servers.to_param(String, query_params, "runType", )
        openapi_params["inputId"] = OpenAPI.Servers.to_param(String, query_params, "inputId", required=true, )
        openapi_params["FlexpartRunPostRequest"] = OpenAPI.Servers.to_param_type(FlexpartRunPostRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function flexpart_run_post_validate(handler)
    function flexpart_run_post_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function flexpart_run_post_invoke(impl; post_invoke=nothing)
    function flexpart_run_post_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.flexpart_run_post(req::HTTP.Request, openapi_params["inputId"], openapi_params["FlexpartRunPostRequest"]; run_type=get(openapi_params, "runType", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function flexpart_runs_get_read(handler)
    function flexpart_runs_get_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["status"] = OpenAPI.Servers.to_param(RunStatus, query_params, "status", )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function flexpart_runs_get_validate(handler)
    function flexpart_runs_get_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function flexpart_runs_get_invoke(impl; post_invoke=nothing)
    function flexpart_runs_get_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.flexpart_runs_get(req::HTTP.Request; status=get(openapi_params, "status", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function flexpart_runs_run_id_delete_read(handler)
    function flexpart_runs_run_id_delete_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["runId"] = OpenAPI.Servers.to_param(String, path_params, "runId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function flexpart_runs_run_id_delete_validate(handler)
    function flexpart_runs_run_id_delete_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function flexpart_runs_run_id_delete_invoke(impl; post_invoke=nothing)
    function flexpart_runs_run_id_delete_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.flexpart_runs_run_id_delete(req::HTTP.Request, openapi_params["runId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function flexpart_runs_run_id_get_read(handler)
    function flexpart_runs_run_id_get_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["runId"] = OpenAPI.Servers.to_param(String, path_params, "runId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function flexpart_runs_run_id_get_validate(handler)
    function flexpart_runs_run_id_get_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function flexpart_runs_run_id_get_invoke(impl; post_invoke=nothing)
    function flexpart_runs_run_id_get_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.flexpart_runs_run_id_get(req::HTTP.Request, openapi_params["runId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function flexpart_runs_run_id_outputs_get_read(handler)
    function flexpart_runs_run_id_outputs_get_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["runId"] = OpenAPI.Servers.to_param(String, path_params, "runId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function flexpart_runs_run_id_outputs_get_validate(handler)
    function flexpart_runs_run_id_outputs_get_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function flexpart_runs_run_id_outputs_get_invoke(impl; post_invoke=nothing)
    function flexpart_runs_run_id_outputs_get_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.flexpart_runs_run_id_outputs_get(req::HTTP.Request, openapi_params["runId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function flexpart_runs_run_id_put_read(handler)
    function flexpart_runs_run_id_put_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["runId"] = OpenAPI.Servers.to_param(String, path_params, "runId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["newName"] = OpenAPI.Servers.to_param(String, query_params, "newName", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function flexpart_runs_run_id_put_validate(handler)
    function flexpart_runs_run_id_put_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function flexpart_runs_run_id_put_invoke(impl; post_invoke=nothing)
    function flexpart_runs_run_id_put_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.flexpart_runs_run_id_put(req::HTTP.Request, openapi_params["runId"], openapi_params["newName"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerFlexpartApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/flexpart/input", OpenAPI.Servers.middleware(impl, flexpart_input_post_read, flexpart_input_post_validate, flexpart_input_post_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/flexpart/inputs", OpenAPI.Servers.middleware(impl, flexpart_inputs_get_read, flexpart_inputs_get_validate, flexpart_inputs_get_invoke; optional_middlewares...))
    HTTP.register!(router, "DELETE", path_prefix * "/flexpart/inputs/{inputId}", OpenAPI.Servers.middleware(impl, flexpart_inputs_input_id_delete_read, flexpart_inputs_input_id_delete_validate, flexpart_inputs_input_id_delete_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/flexpart/inputs/{inputId}", OpenAPI.Servers.middleware(impl, flexpart_inputs_input_id_get_read, flexpart_inputs_input_id_get_validate, flexpart_inputs_input_id_get_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/flexpart/inputs/{inputId}", OpenAPI.Servers.middleware(impl, flexpart_inputs_input_id_put_read, flexpart_inputs_input_id_put_validate, flexpart_inputs_input_id_put_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/flexpart/outputs/{outputId}/dimensions", OpenAPI.Servers.middleware(impl, flexpart_outputs_output_id_dimensions_get_read, flexpart_outputs_output_id_dimensions_get_validate, flexpart_outputs_output_id_dimensions_get_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/flexpart/outputs/{outputId}", OpenAPI.Servers.middleware(impl, flexpart_outputs_output_id_get_read, flexpart_outputs_output_id_get_validate, flexpart_outputs_output_id_get_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/flexpart/outputs/{outputId}/layers", OpenAPI.Servers.middleware(impl, flexpart_outputs_output_id_layers_get_read, flexpart_outputs_output_id_layers_get_validate, flexpart_outputs_output_id_layers_get_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/flexpart/outputs/{outputId}/slice", OpenAPI.Servers.middleware(impl, flexpart_outputs_output_id_slice_post_read, flexpart_outputs_output_id_slice_post_validate, flexpart_outputs_output_id_slice_post_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/flexpart/outputs/{outputId}/stats", OpenAPI.Servers.middleware(impl, flexpart_outputs_output_id_stats_post_read, flexpart_outputs_output_id_stats_post_validate, flexpart_outputs_output_id_stats_post_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/flexpart/run", OpenAPI.Servers.middleware(impl, flexpart_run_post_read, flexpart_run_post_validate, flexpart_run_post_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/flexpart/runs", OpenAPI.Servers.middleware(impl, flexpart_runs_get_read, flexpart_runs_get_validate, flexpart_runs_get_invoke; optional_middlewares...))
    HTTP.register!(router, "DELETE", path_prefix * "/flexpart/runs/{runId}", OpenAPI.Servers.middleware(impl, flexpart_runs_run_id_delete_read, flexpart_runs_run_id_delete_validate, flexpart_runs_run_id_delete_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/flexpart/runs/{runId}", OpenAPI.Servers.middleware(impl, flexpart_runs_run_id_get_read, flexpart_runs_run_id_get_validate, flexpart_runs_run_id_get_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/flexpart/runs/{runId}/outputs", OpenAPI.Servers.middleware(impl, flexpart_runs_run_id_outputs_get_read, flexpart_runs_run_id_outputs_get_validate, flexpart_runs_run_id_outputs_get_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/flexpart/runs/{runId}", OpenAPI.Servers.middleware(impl, flexpart_runs_run_id_put_read, flexpart_runs_run_id_put_validate, flexpart_runs_run_id_put_invoke; optional_middlewares...))
    return router
end
